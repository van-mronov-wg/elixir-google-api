# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Admin.Directory_v1.Api.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias GoogleApi.Admin.Directory_v1.Connection
  import GoogleApi.Admin.Directory_v1.RequestBuilder

  @doc """
  Remove a alias for the user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - alias (String.t): The alias to be removed
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec directory_users_aliases_delete(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def directory_users_aliases_delete(connection, user_key, alias, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    %{}
    |> method(:delete)
    |> url("/users/{userKey}/aliases/{alias}", %{
      "userKey" => URI.encode_www_form(user_key),
      "alias" => URI.encode_www_form(alias)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Add a alias for the user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (Alias): 

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.Alias{}} on success
  {:error, info} on failure
  """
  @spec directory_users_aliases_insert(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.Alias.t()} | {:error, Tesla.Env.t()}
  def directory_users_aliases_insert(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/users/{userKey}/aliases", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.Alias{})
  end

  @doc """
  List all aliases for a user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :event (String.t): Event on which subscription is intended (if subscribing)

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.Aliases{}} on success
  {:error, info} on failure
  """
  @spec directory_users_aliases_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.Aliases.t()} | {:error, Tesla.Env.t()}
  def directory_users_aliases_list(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :event => :query
    }

    %{}
    |> method(:get)
    |> url("/users/{userKey}/aliases", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.Aliases{})
  end

  @doc """
  Watch for changes in user aliases list

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :event (String.t): Event on which subscription is intended (if subscribing)
    - :resource (Channel): 

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.Channel{}} on success
  {:error, info} on failure
  """
  @spec directory_users_aliases_watch(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.Channel.t()} | {:error, Tesla.Env.t()}
  def directory_users_aliases_watch(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :event => :query,
      :resource => :body
    }

    %{}
    |> method(:post)
    |> url("/users/{userKey}/aliases/watch", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.Channel{})
  end

  @doc """
  Delete user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec directory_users_delete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def directory_users_delete(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    %{}
    |> method(:delete)
    |> url("/users/{userKey}", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  retrieve user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :customFieldMask (String.t): Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection&#x3D;custom.
    - :projection (String.t): What subset of fields to fetch for this user.
    - :viewType (String.t): Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.User{}} on success
  {:error, info} on failure
  """
  @spec directory_users_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.User.t()} | {:error, Tesla.Env.t()}
  def directory_users_get(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :customFieldMask => :query,
      :projection => :query,
      :viewType => :query
    }

    %{}
    |> method(:get)
    |> url("/users/{userKey}", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.User{})
  end

  @doc """
  create user.

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (User): 

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.User{}} on success
  {:error, info} on failure
  """
  @spec directory_users_insert(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.User.t()} | {:error, Tesla.Env.t()}
  def directory_users_insert(connection, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.User{})
  end

  @doc """
  Retrieve either deleted users or all users in a domain (paginated)

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :customFieldMask (String.t): Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection&#x3D;custom.
    - :customer (String.t): Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.
    - :domain (String.t): Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.
    - :event (String.t): Event on which subscription is intended (if subscribing)
    - :maxResults (integer()): Maximum number of results to return. Default is 100. Max allowed is 500
    - :orderBy (String.t): Column to use for sorting results
    - :pageToken (String.t): Token to specify next page in the list
    - :projection (String.t): What subset of fields to fetch for this user.
    - :query (String.t): Query string search. Should be of the form \&quot;\&quot;. Complete documentation is at https://developers.google.com/admin-sdk/directory/v1/guides/search-users
    - :showDeleted (String.t): If set to true retrieves the list of deleted users. Default is false
    - :sortOrder (String.t): Whether to return results in ascending or descending order.
    - :viewType (String.t): Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.Users{}} on success
  {:error, info} on failure
  """
  @spec directory_users_list(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.Users.t()} | {:error, Tesla.Env.t()}
  def directory_users_list(connection, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :customFieldMask => :query,
      :customer => :query,
      :domain => :query,
      :event => :query,
      :maxResults => :query,
      :orderBy => :query,
      :pageToken => :query,
      :projection => :query,
      :query => :query,
      :showDeleted => :query,
      :sortOrder => :query,
      :viewType => :query
    }

    %{}
    |> method(:get)
    |> url("/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.Users{})
  end

  @doc """
  change admin status of a user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user as admin
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (UserMakeAdmin): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec directory_users_make_admin(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def directory_users_make_admin(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/users/{userKey}/makeAdmin", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  update user. This method supports patch semantics.

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user. If ID, it should match with id of user object
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (User): 

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.User{}} on success
  {:error, info} on failure
  """
  @spec directory_users_patch(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.User.t()} | {:error, Tesla.Env.t()}
  def directory_users_patch(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/users/{userKey}", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.User{})
  end

  @doc """
  Remove photos for the user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec directory_users_photos_delete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def directory_users_photos_delete(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    %{}
    |> method(:delete)
    |> url("/users/{userKey}/photos/thumbnail", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Retrieve photo of a user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.UserPhoto{}} on success
  {:error, info} on failure
  """
  @spec directory_users_photos_get(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.UserPhoto.t()} | {:error, Tesla.Env.t()}
  def directory_users_photos_get(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query
    }

    %{}
    |> method(:get)
    |> url("/users/{userKey}/photos/thumbnail", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.UserPhoto{})
  end

  @doc """
  Add a photo for the user. This method supports patch semantics.

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (UserPhoto): 

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.UserPhoto{}} on success
  {:error, info} on failure
  """
  @spec directory_users_photos_patch(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.UserPhoto.t()} | {:error, Tesla.Env.t()}
  def directory_users_photos_patch(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:patch)
    |> url("/users/{userKey}/photos/thumbnail", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.UserPhoto{})
  end

  @doc """
  Add a photo for the user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (UserPhoto): 

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.UserPhoto{}} on success
  {:error, info} on failure
  """
  @spec directory_users_photos_update(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.UserPhoto.t()} | {:error, Tesla.Env.t()}
  def directory_users_photos_update(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/users/{userKey}/photos/thumbnail", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.UserPhoto{})
  end

  @doc """
  Undelete a deleted user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): The immutable id of the user
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (UserUndelete): 

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec directory_users_undelete(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def directory_users_undelete(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:post)
    |> url("/users/{userKey}/undelete", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  update user

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - user_key (String.t): Email or immutable ID of the user. If ID, it should match with id of user object
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :body (User): 

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.User{}} on success
  {:error, info} on failure
  """
  @spec directory_users_update(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.User.t()} | {:error, Tesla.Env.t()}
  def directory_users_update(connection, user_key, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :body => :body
    }

    %{}
    |> method(:put)
    |> url("/users/{userKey}", %{
      "userKey" => URI.encode_www_form(user_key)
    })
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.User{})
  end

  @doc """
  Watch for changes in users list

  ## Parameters

  - connection (GoogleApi.Admin.Directory_v1.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :alt (String.t): Data format for the response.
    - :fields (String.t): Selector specifying which fields to include in a partial response.
    - :key (String.t): API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    - :oauth_token (String.t): OAuth 2.0 token for the current user.
    - :prettyPrint (boolean()): Returns response with indentations and line breaks.
    - :quotaUser (String.t): An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
    - :userIp (String.t): Deprecated. Please use quotaUser instead.
    - :customFieldMask (String.t): Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection&#x3D;custom.
    - :customer (String.t): Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.
    - :domain (String.t): Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.
    - :event (String.t): Event on which subscription is intended (if subscribing)
    - :maxResults (integer()): Maximum number of results to return. Default is 100. Max allowed is 500
    - :orderBy (String.t): Column to use for sorting results
    - :pageToken (String.t): Token to specify next page in the list
    - :projection (String.t): What subset of fields to fetch for this user.
    - :query (String.t): Query string search. Should be of the form \&quot;\&quot;. Complete documentation is at https://developers.google.com/admin-sdk/directory/v1/guides/search-users
    - :showDeleted (String.t): If set to true retrieves the list of deleted users. Default is false
    - :sortOrder (String.t): Whether to return results in ascending or descending order.
    - :viewType (String.t): Whether to fetch the ADMIN_VIEW or DOMAIN_PUBLIC view of the user.
    - :resource (Channel): 

  ## Returns

  {:ok, %GoogleApi.Admin.Directory_v1.Model.Channel{}} on success
  {:error, info} on failure
  """
  @spec directory_users_watch(Tesla.Env.client(), keyword()) ::
          {:ok, GoogleApi.Admin.Directory_v1.Model.Channel.t()} | {:error, Tesla.Env.t()}
  def directory_users_watch(connection, opts \\ []) do
    optional_params = %{
      :alt => :query,
      :fields => :query,
      :key => :query,
      :oauth_token => :query,
      :prettyPrint => :query,
      :quotaUser => :query,
      :userIp => :query,
      :customFieldMask => :query,
      :customer => :query,
      :domain => :query,
      :event => :query,
      :maxResults => :query,
      :orderBy => :query,
      :pageToken => :query,
      :projection => :query,
      :query => :query,
      :showDeleted => :query,
      :sortOrder => :query,
      :viewType => :query,
      :resource => :body
    }

    %{}
    |> method(:post)
    |> url("/users/watch")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%GoogleApi.Admin.Directory_v1.Model.Channel{})
  end
end
