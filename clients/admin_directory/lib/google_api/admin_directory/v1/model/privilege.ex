# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.AdminDirectory.V1.Model.Privilege do
  @moduledoc """
  JSON template for privilege resource in Directory API.

  ## Attributes

  - childPrivileges ([Privilege]): A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege. Defaults to: `null`.
  - etag (String.t): ETag of the resource. Defaults to: `null`.
  - isOuScopable (boolean()): If the privilege can be restricted to an organization unit. Defaults to: `null`.
  - kind (String.t): The type of the API resource. This is always admin#directory#privilege. Defaults to: `null`.
  - privilegeName (String.t): The name of the privilege. Defaults to: `null`.
  - serviceId (String.t): The obfuscated ID of the service this privilege is for. Defaults to: `null`.
  - serviceName (String.t): The name of the service this privilege is for. Defaults to: `null`.
  """

  @type t :: %__MODULE__{
          childPrivileges: list(GoogleApi.AdminDirectory.V1.Model.Privilege.t()),
          etag: any(),
          isOuScopable: any(),
          kind: any(),
          privilegeName: any(),
          serviceId: any(),
          serviceName: any()
        }

  defstruct [
    :childPrivileges,
    :etag,
    :isOuScopable,
    :kind,
    :privilegeName,
    :serviceId,
    :serviceName
  ]
end

defimpl Poison.Decoder, for: GoogleApi.AdminDirectory.V1.Model.Privilege do
  import GoogleApi.AdminDirectory.V1.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:childPrivileges, :list, GoogleApi.AdminDirectory.V1.Model.Privilege, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.AdminDirectory.V1.Model.Privilege do
  def encode(value, options) do
    GoogleApi.AdminDirectory.V1.Deserializer.serialize_non_nil(value, options)
  end
end
